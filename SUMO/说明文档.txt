*****************************************************************
SUMO仿真二次开发α测试版
2020/11/15

环境限制：
windows系统
已经设置好SUMO_HOME环境变量与CMD环境变量
python环境中安装numpy,pandas,os,sys,xml库

功能说明：
（1）输入参数自动生成单车道简单场景的net、sumocfg文件
（2）输入参数自动创建车辆的到达规则
	基于时间分布：均匀分布、随机分布
	基于空间分布：均匀分布、正态分布
（3）自动创造'SUMO_HOME'环境
（4）通过参数实现开放边界与周期边界
（5）选择性输出仿真过程的数据表格
（6）IDM跟驰模型

各文档功能简介：
————————————————————————————————————————
net.py
生成nod.xml,edg.xml并通过netconvert合成net.xml

net.Simple.nod(Length(int,float))
生成nod.xml,Length为期望的道路长度。

net.Simple.edg(speed(int,float))
生成edg.xml,speed为道路限速（好像没什么用）。

net.netconvert(path_sumo(str))
合成net.xml，path_sumo为SUMO\bin的绝对路径
——————————————————————————————————————————
rou.py
车辆分布初始值设置
***************************************************************************************************
rou.TimeDistribution(self,l(int,float))
返回一个实例化对象，车辆采用时间分布，初始位置为0，l为车辆长度
self.uniform(self,N(int),t(int,float))
车辆以相同的时间间距到达，N为车辆到达数量，t为车辆之间到达的时间间距。
self.random_distribution(self,N(int),start(int,float),end(int,float))
车辆以随机的时间间距到达，N为车辆到达数量，start和end代表车辆到达的时间区间。
****************************************************************************************************
rou.HeadwayDistribution(self,l(int,float))
返回一个实例化对象，车辆采用空间分布，仿真开始时全部位于道路上，l为车辆长度。
self.uniform(self,N(int),h(int,float),speed(int,float))
车辆之间保持相同的车头距离，N为车辆到达数量，h为车辆之间的车头距，speed为车辆起始速度。
self.normal(self,N,mu,sigma,speed)
车辆之间的车头距离服从正态分布，N为车辆到达数量，mu为正态分布的期望值，sigma为正态分布的标准差,speed为车辆起始速度。
————————————————————————————————————————————
sumocfg.py
生成sumocfg文件
sumocfg.cfg(stepLength)
生成sumocfg文件，stepLength代表仿真步长。
——————————————————————————————————————————————————
environment.py
将python环境设置为SUMO_HOME
environment.main(sumocfgFile='sumo.sumocfg'(str))
检查并设置初始环境，sumocfgFile为sumocfg路径，默认值为sumocfg.py生成的文件
————————————————————————————————————————————————
Model.py
跟驰模型所在文件。
——————————————————————————————————————————————————
run.py
仿真设置与运行仿真。
run.Run(end_time,time_step,L,borders,output_df = False)
返回一个实例化对象，end_time为仿真结束时间即仿真时长，time_step为仿真步长（与sumocfg.cfg中输入的步长须保持一致）
L为道路长度（与net.Simple.nod中输入的路长需保持一致),
borders为边界条件，当borders=0时，则仿真边界为周期性边界，当borders>0时，仿真边界为开放性边界，且borders的值为头车的速度值。
output_df为是否在仿真过程中print车辆的数据表格，默认为否。
self.IDM(self,alpha,beta,v0,s0,T)
以IDM模型作为跟驰模型进行仿真，alpha,beta,v0,s0,T为跟驰模型参数。
————————————————————————————————————————————————————-
example.py
例子。

目前存在的BUG或不足：
（1）跟驰模型只有一个。
（2）开放型边界流出率为100%
（3）尚未开放出图功能。
（3）周期型边界输入车辆过多时GUI.exe会出现无响应情况。
（4）周期型边界在车辆到达道路尽头附近（未达到边界）时会消失，推荐将net.Simple.nod设置的道路长度比run.Run中的道路长度稍大一些。
